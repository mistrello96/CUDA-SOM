require("kohonen")
require("cluster")
require("factoextra")
require("NbClust")
setwd("~/Tesi/EsamplesData")
require("kohonen")
require("cluster")
require("factoextra")
require("NbClust")
optimal_som <- function(data) {
return (sqrt(5*nrow(data)^0.54321));
}
get_best_k <- function(seqdata) {
a <- get_best_k_gapstat(seqdata);
b <- get_best_k_silhouette(seqdata);
print(a);
print(b);
#  return( (a+b)/2 );
return (b); # more sbracativ
}
get_best_k_gapstat <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "gap_stat",hc_method = "complete");
for (i in 1:9) {
if (ret$data$gap[i]>ret$data$gap[i+1])  {
return(i);
}
}
return(10);
}
get_best_k_silhouette <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "silhouette",hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
get_best_k_wss <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "wss", hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
input_file = "leucemia_116x14.txt" # dati raw
seqdata_original <- read.csv(input_file, sep="\t", dec=".", header=FALSE)
seqdata <- as.matrix(seqdata_original)
D <- optimal_som(seqdata);
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
coolBlueHotRed <- function(n, alpha = 1) {rainbow(n, end=4/6, alpha=alpha)[n:1]}
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
require("kohonen")
require("cluster")
require("factoextra")
require("NbClust")
optimal_som <- function(data) {
return (sqrt(5*nrow(data)^0.54321));
}
get_best_k <- function(seqdata) {
a <- get_best_k_gapstat(seqdata);
b <- get_best_k_silhouette(seqdata);
print(a);
print(b);
#  return( (a+b)/2 );
return (b); # more sbracativ
}
get_best_k_gapstat <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "gap_stat",hc_method = "complete");
for (i in 1:9) {
if (ret$data$gap[i]>ret$data$gap[i+1])  {
return(i);
}
}
return(10);
}
get_best_k_silhouette <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "silhouette",hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
get_best_k_wss <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "wss", hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
input_file = "leucemia_116x14.txt" # dati raw
test_name = "TestLimite"
seqdata_original <- read.csv(input_file, sep="\t", dec=".", header=FALSE)
seqdata <- as.matrix(seqdata_original)
D <- optimal_som(seqdata);
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=500, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=500, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=500, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
input_file = "melanoma_1540x4.txt" # dati raw
require("kohonen")
require("cluster")
require("factoextra")
require("NbClust")
optimal_som <- function(data) {
return (sqrt(5*nrow(data)^0.54321));
}
get_best_k <- function(seqdata) {
a <- get_best_k_gapstat(seqdata);
b <- get_best_k_silhouette(seqdata);
print(a);
print(b);
#  return( (a+b)/2 );
return (b); # more sbracativ
}
get_best_k_gapstat <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "gap_stat",hc_method = "complete");
for (i in 1:9) {
if (ret$data$gap[i]>ret$data$gap[i+1])  {
return(i);
}
}
return(10);
}
get_best_k_silhouette <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "silhouette",hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
get_best_k_wss <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "wss", hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
input_file = "melanoma_1540x4.txt" # dati raw
seqdata_original <- read.csv(input_file, sep="\t", dec=".", header=FALSE)
seqdata <- as.matrix(seqdata_original)
D <- optimal_som(seqdata);
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
coolBlueHotRed <- function(n, alpha = 1) {rainbow(n, end=4/6, alpha=alpha)[n:1]}
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=41, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
require("kohonen")
require("cluster")
require("factoextra")
require("NbClust")
optimal_som <- function(data) {
return (sqrt(5*nrow(data)^0.54321));
}
get_best_k <- function(seqdata) {
a <- get_best_k_gapstat(seqdata);
b <- get_best_k_silhouette(seqdata);
print(a);
print(b);
#  return( (a+b)/2 );
return (b); # more sbracativ
}
get_best_k_gapstat <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "gap_stat",hc_method = "complete");
for (i in 1:9) {
if (ret$data$gap[i]>ret$data$gap[i+1])  {
return(i);
}
}
return(10);
}
get_best_k_silhouette <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "silhouette",hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
get_best_k_wss <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "wss", hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
input_file = "melanoma_1540x4.txt" # dati raw
input_file = "leucemia_116x14.txt" # dati raw
seqdata_original <- read.csv(input_file, sep="\t", dec=".", header=FALSE)
seqdata <- as.matrix(seqdata_original)
D <- optimal_som(seqdata);
system.time(som_model <- supersom(seqdata, rlen=500, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
require("kohonen")
require("cluster")
require("factoextra")
require("NbClust")
optimal_som <- function(data) {
return (sqrt(5*nrow(data)^0.54321));
}
get_best_k <- function(seqdata) {
a <- get_best_k_gapstat(seqdata);
b <- get_best_k_silhouette(seqdata);
print(a);
print(b);
#  return( (a+b)/2 );
return (b); # more sbracativ
}
get_best_k_gapstat <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "gap_stat",hc_method = "complete");
for (i in 1:9) {
if (ret$data$gap[i]>ret$data$gap[i+1])  {
return(i);
}
}
return(10);
}
get_best_k_silhouette <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "silhouette",hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
get_best_k_wss <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "wss", hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
input_file = "leucemia_116x14.txt" # dati raw
input_file = "melanoma_1540x4.txt" # dati raw
seqdata_original <- read.csv(input_file, sep="\t", dec=".", header=FALSE)
seqdata <- as.matrix(seqdata_original)
D <- optimal_som(seqdata);
system.time(som_model <- supersom(seqdata, rlen=100, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=3, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
coolBlueHotRed <- function(n, alpha = 1) {rainbow(n, end=4/6, alpha=alpha)[n:1]}
system.time(som_model <- supersom(seqdata, rlen=100, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=500, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=500, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=500, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=500, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=500, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"), cores = 1)
system.time(som_model <- supersom(seqdata, rlen=500, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=1000, radius=6, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
coolBlueHotRed <- function(n, alpha = 1) {rainbow(n, end=4/6, alpha=alpha)[n:1]}
require("kohonen")
require("cluster")
require("factoextra")
require("NbClust")
optimal_som <- function(data) {
return (sqrt(5*nrow(data)^0.54321));
}
get_best_k <- function(seqdata) {
a <- get_best_k_gapstat(seqdata);
b <- get_best_k_silhouette(seqdata);
print(a);
print(b);
#  return( (a+b)/2 );
return (b); # more sbracativ
}
get_best_k_gapstat <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "gap_stat",hc_method = "complete");
for (i in 1:9) {
if (ret$data$gap[i]>ret$data$gap[i+1])  {
return(i);
}
}
return(10);
}
get_best_k_silhouette <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "silhouette",hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
get_best_k_wss <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "wss", hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
input_file = "leucemiareplicated_60000x14.txt" # dati raw
seqdata_original <- read.csv(input_file, sep="\t", dec=".", header=FALSE)
seqdata <- as.matrix(seqdata_original)
D <- optimal_som(seqdata);
system.time(som_model <- supersom(seqdata, rlen=100, radius=15, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean",cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=15, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean",cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=15, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=100, radius=15, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
system.time(som_model <- supersom(seqdata, rlen=500, radius=15, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=15, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores=1))
system.time(som_model <- supersom(seqdata, rlen=500, radius=15, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
require("kohonen")
require("cluster")
require("factoextra")
require("NbClust")
optimal_som <- function(data) {
return (sqrt(5*nrow(data)^0.54321));
}
get_best_k <- function(seqdata) {
a <- get_best_k_gapstat(seqdata);
b <- get_best_k_silhouette(seqdata);
print(a);
print(b);
#  return( (a+b)/2 );
return (b); # more sbracativ
}
get_best_k_gapstat <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "gap_stat",hc_method = "complete");
for (i in 1:9) {
if (ret$data$gap[i]>ret$data$gap[i+1])  {
return(i);
}
}
return(10);
}
get_best_k_silhouette <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "silhouette",hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
get_best_k_wss <- function(seqdata) {
ret <- fviz_nbclust(seqdata, hcut, method = "wss", hc_method = "ward.D2");
return (which(ret$data$y==max(ret$data$y)));
}
input_file = "Fibroid_264000x4.txt" # dati raw
seqdata_original <- read.csv(input_file, sep="\t", dec=".", header=FALSE)
seqdata <- as.matrix(seqdata_original)
D <- optimal_som(seqdata);
system.time(som_model <- supersom(seqdata, rlen=100, radius=23, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean", cores = 1))
system.time(som_model <- supersom(seqdata, rlen=100, radius=23, alpha=c(0.1, 0.001), grid=somgrid(D,D,"hexagonal",toroidal = F),keep.data=T, dist.fcts="euclidean"))
